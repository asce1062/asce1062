---
import Layout from '../../layouts/Layout.astro';
import Post from '../../components/Post.astro';
import Columns from '../../components/Columns.astro';
import type { Posts } from '../../types';

export async function getStaticPaths() {
  const allPosts = await Astro.glob('../blog/*.mdx');
  allPosts.sort((a: { frontmatter: { pubDate: string } }, b: { frontmatter: { pubDate: string } }) => Date.parse(b.frontmatter.pubDate) - Date.parse(a.frontmatter.pubDate));
  const uniqueTags = [...new Set(allPosts.map((post: Posts) => post.frontmatter.tags).flat())];
  return uniqueTags.map((tag: string) => {
    const filteredPosts = allPosts.filter((post: Posts) => post.frontmatter.tags.includes(tag));
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });
}

const { tag } = Astro.params;
const { posts } = Astro.props;
---

<Layout title={tag} ogImage="social-preview.png" description=`bleep bloop found ${posts.length} ${ posts.length == 1 ? "post" : "posts"}`>
  <main>
    <p>found {posts.length} { posts.length == 1 ? "post" : "posts"} tagged with <b>{tag}</b></p>
    <ul>
      <Columns>
          {posts.map((post: Posts) => (
          <Post
              name = {post.frontmatter.title},
              url={post.url},
              image={post.frontmatter.image.url},
              description={post.frontmatter.description},
              date={(post.frontmatter.pubDate).toString().slice(0,10)}/>))}
      </Columns>
    </ul>
  </main>
</Layout>
