---
import Layout from "@/layouts/Layout.astro";
import PreviewImage from "@/components/PreviewImage.astro";
import SocialShareButtons from "@/components/blog/SocialShareButtons.astro";
import TableOfContentsComponent from "@/components/blog/TableOfContents.astro";
import PostNavigation from "@/components/blog/PostNavigation.astro";
import { getCollection } from "astro:content";
import { estimateReadingTime } from "@/lib/blog/utils";
import type { TableOfContents } from "@/types";
import "@/styles/global.css";

interface Props {
	title: string;
	date: string;
	image: string;
	alt: string;
	description: string;
	tags: Array<any>;
	currentPost: string;
	tableOfContents?: TableOfContents;
}

const { title, date, image, alt, description, tags, currentPost, tableOfContents } = Astro.props;
const currentUrl = Astro.url.href;

// Get all blog posts and sort by date
const allPosts = await getCollection("blog");
const sortedPosts = allPosts.sort((a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime());

// Find current post using permalink
const currentPostIndex = sortedPosts.findIndex((p) => p.id === currentPost);
const currentEntry = sortedPosts[currentPostIndex];

const previousPost =
	currentPostIndex !== -1 && currentPostIndex < allPosts.length - 1 ? allPosts[currentPostIndex + 1] : null;

const nextPost = currentPostIndex !== -1 && currentPostIndex > 0 ? allPosts[currentPostIndex - 1] : null;

// Calculate accurate reading time from entry body
const readingTime = currentEntry ? estimateReadingTime(currentEntry.body) : "";
---

<Layout
	title={title}
	ogImage=`open-graph${(Astro.url.pathname).slice(0, -1)}.png`
	description={description}
	type="article"
	datePublished={new Date(date).toISOString()}
	tags={tags}
	category={tags && tags.length > 0 ? tags[0] : undefined}
	readingTime={readingTime}>
	<article data-pagefind-body data-pagefind-sort="date">
		<h2 data-pagefind-meta="title">{title}</h2>
		<span data-pagefind-meta="date" data-pagefind-sort="date:{date}">
			<i><b>{date}</b>{readingTime && ` â€¢ ${readingTime}`} | {description}</i>
		</span>
		<PreviewImage src={image} altText={alt} />
		<span>
			tags: {
				tags.map((tag) => (
					<a class="mr-2" href={`/tags/${tag}`} data-pagefind-meta="tag">
						{tag}
					</a>
				))
			}
		</span>
		<hr class="w-full h-[1.25px] my-4 border-0 bg-palette-900 dark:bg-white" />

		<TableOfContentsComponent tableOfContents={tableOfContents} />

		<slot />

		<hr class="my-8 border-dashed border-palette-700 dark:border-white" />

		<div data-pagefind-ignore class="mt-4 mb-8 sm:my-8">
			<div class="my-4 flex flex-col items-center justify-center gap-6 sm:flex-row sm:items-end sm:gap-4">
				<SocialShareButtons title={title} url={currentUrl} />
			</div>
			<hr class="my-6 border-dashed border-palette-700 dark:border-white" />
		</div>

		<PostNavigation previousPost={previousPost} nextPost={nextPost} />
	</article>
</Layout>
