# Netlify Configuration
# https://docs.netlify.com/configure-builds/file-based-configuration/

[build]
# Build command
command = "npm run build"

# Publish directory (output directory after build)
publish = "dist"

# Functions directory (if using Netlify Functions)
# functions = "netlify/functions"

[build.environment]
# Node version
NODE_VERSION = "22"

# Build optimization
NPM_FLAGS = "--legacy-peer-deps"

# Local development configuration
[dev]
# Command to run for local development
command = "npm run dev"

# Port that Astro dev server runs on
targetPort = 4321

# Port for Netlify Dev proxy
port = 8888

# Auto-open browser
autoLaunch = false

# Disable framework detection to prevent interference with Astro's routing
framework = "#custom"

# Production context (main branch)
[context.production]
command = "npm run build"

[context.production.environment]
NODE_ENV = "production"

# Deploy Preview context (pull requests)
[context.deploy-preview]
command = "npm run build"

# Branch deploys
[context.branch-deploy]
command = "npm run build"

# Redirects and rewrites
# Order matters: more specific rules first, catch-all rules last

# Enforce HTTPS
[[redirects]]
from = "http://*alexmbugua.me/*"
to = "https://alexmbugua.me/:splat"
status = 301
force = true

# RSS Feed Shortcuts
[[redirects]]
from = "/rss"
to = "/rss.xml"
status = 301

[[redirects]]
from = "/feed"
to = "/rss.xml"
status = 301

[[redirects]]
from = "/atom.xml"
to = "/rss.xml"
status = 301

# Sitemap Shortcuts
[[redirects]]
from = "/sitemap.xml"
to = "/sitemap-index.xml"
status = 301

[[redirects]]
from = "/sitemap"
to = "/sitemap-index.xml"
status = 301

# Resume Shortcut
[[redirects]]
from = "/resume"
to = "/blog/2025-06-19-resume/"
status = 301

# Legacy Blog Patterns
# /blog/YYYY/MM/DD/slug -> /blog/YYYY-MM-DD-slug/
[[redirects]]
from = "/blog/:year/:month/:day/:slug"
to = "/blog/:year-:month-:day-:slug/"
status = 301

# Trailing Slash Normalization for blog posts
[[redirects]]
from = "/blog/:slug"
to = "/blog/:slug/"
status = 301

# 404 fallback (must be last)
[[redirects]]
from = "/*"
to = "/404.html"
status = 404
force = false

# Headers
# Content-Type headers for specific files
[[headers]]
for = "/rss.xml"
[headers.values]
Content-Type = "application/rss+xml; charset=UTF-8"

[[headers]]
for = "/sitemap-index.xml"
[headers.values]
Content-Type = "application/xml; charset=UTF-8"

[[headers]]
for = "/sitemap-0.xml"
[headers.values]
Content-Type = "application/xml; charset=UTF-8"

[[headers]]
for = "/robots.txt"
[headers.values]
Content-Type = "text/plain; charset=UTF-8"

# Security headers for all pages
[[headers]]
for = "/*"
[headers.values]
# Content Security Policy - Protects against XSS and other injection attacks
# Note: 'unsafe-inline' is needed for Astro's hydration and astro-themes
# 'data:' is required for Astro's ClientRouter (view transitions)
Content-Security-Policy = """
  default-src 'self';
  script-src 'self' 'unsafe-inline' 'unsafe-eval' data:;
  style-src 'self' 'unsafe-inline';
  img-src 'self' data: https: blob:;
  font-src 'self' data:;
  connect-src 'self' https://jandee.vercel.app https://opengraph.githubassets.com;
  frame-src https://jandee.vercel.app;
  worker-src 'self' blob:;
  object-src 'none';
  base-uri 'self';
  form-action 'self';
  frame-ancestors 'none';
  upgrade-insecure-requests;
"""
# Prevents clickjacking attacks
X-Frame-Options = "DENY"
# Legacy XSS protection (browsers now use CSP instead)
X-XSS-Protection = "1; mode=block"
# Prevents MIME type sniffing
X-Content-Type-Options = "nosniff"
# Controls referrer information
Referrer-Policy = "strict-origin-when-cross-origin"
# Feature policy to restrict browser features
Permissions-Policy = "camera=(), microphone=(), geolocation=(), payment=()"
# Strict Transport Security - Forces HTTPS
Strict-Transport-Security = "max-age=63072000; includeSubDomains; preload"

[[headers]]
for = "/astro/*"
[headers.values]
Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
for = "/*.js"
[headers.values]
Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
for = "/*.css"
[headers.values]
Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
for = "/fonts/*"
[headers.values]
Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
for = "/*.woff2"
[headers.values]
Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
for = "/*.png"
[headers.values]
Cache-Control = "public, max-age=604800"

[[headers]]
for = "/*.jpg"
[headers.values]
Cache-Control = "public, max-age=604800"

[[headers]]
for = "/*.webp"
[headers.values]
Cache-Control = "public, max-age=604800"

# Netlify Plugins
# Generate and manage sitemap
[[plugins]]
package = "@netlify/plugin-sitemap"

# Run Lighthouse performance audits
[[plugins]]
package = "@netlify/plugin-lighthouse"

[plugins.inputs]
# Lighthouse performance budgets
[plugins.inputs.thresholds]
performance = 0.9
accessibility = 0.9
best-practices = 0.9
seo = 0.9

# Check for broken links during build
[[plugins]]
package = "netlify-plugin-checklinks"

[plugins.inputs]
# Skip checking 404 pages and other known patterns
skipPatterns = ["/404", "/404/", "/404.html"]
# Don't fail the build on broken links (just warn)
checkExternal = false

# Submit sitemap to search engines
[[plugins]]
package = "netlify-plugin-submit-sitemap"

[plugins.inputs]
baseUrl = "https://alexmbugua.me"
sitemapPath = "/sitemap-index.xml"
providers = ["google", "bing", "yandex"]

# Form handling (if using Netlify Forms)
# No configuration needed - Netlify auto-detects forms in HTML
